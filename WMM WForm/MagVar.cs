using System;

namespace TrueNorth.Geographic
{
    /*  module magfield.c */
    // http://williams.best.vwh.net/magvar/magfield.c

    /* Module to calculate magnetic variation and field given position,
    **               altitude, and date
    ** Implements the NIMA (formerly DMA) WMM and IGRF models
    **
    **    http://www.nima.mil/GandG/ngdc-wmm2000.html
    **    For WMM2000 coefficients:
    **    ftp://ftp.ngdc.noaa.gov/Solid_Earth/Mainfld_Mag/DoD_Model/wmm.cof
    **    For IGRF/DGRF coefficients:
    **    http://swdcdb.kugi.kyoto-u.ac.jp/igrf/coef/igrfall.d
    **
    ** Copyright (C) 2000  Edward A Williams <Ed_Williams@compuserve.com>
    ** C# Port by Michael Coyle <Michael.Coyle@BlueToque.ca>,
    **
    **  The routine uses a spherical harmonic expansion of the magnetic
    ** potential up to twelfth order, together with its time variation, as
    ** described in Chapter 4 of "Geomagnetism, Vol 1, Ed. J.A.Jacobs,
    ** Academic Press (London 1987)". The program first converts geodetic
    ** coordinates (lat/long on elliptic earth and altitude) to spherical
    ** geocentric (spherical lat/long and radius) coordinates. Using this,
    ** the spherical (B_r, B_theta, B_phi) magnetic field components are
    ** computed from the model. These are finally referred to surface (X, Y,
    ** Z) coordinates.
    **
    **   Fields are accurate to better than 200nT, variation and dip to
    ** better than 0.5 degrees, with the exception of the declination near
    ** the magnetic poles (where it is ill-defined) where the error may reach
    ** 4 degrees or more.
    **
    **   Variation is undefined at both the geographic and  
    ** magnetic poles, even though the field itself is well-behaved. To
    ** avoid the routine blowing up, latitude entries corresponding to
    ** the geographic poles are slightly offset. At the magnetic poles,
    ** the routine returns zero variation.
    **
    ** HISTORY
    ** Adapted from EAW Excel 3.0 version 3/27/94 EAW
    ** Recoded in C++ by Starry Chan
    ** WMM95 added and rearranged in ANSI-C EAW 7/9/95
    ** Put shell around program and made Borland & GCC compatible EAW 11/22/95
    ** IGRF95 added 2/96 EAW
    ** WMM2000 IGR2000 added 2/00 EAW
    ** Released under GPL  3/26/00 EAW
    ** Adaptions and modifications for the SimGear project  3/27/2000 CLO
    ** Removed all pow() calls and made static roots[,] arrays to
    ** save many sqrt() calls on subsequent invocations
    ** 3/28/2000  Norman Vine -- nhv@yahoo.com
    ** Put in some bullet-proofing to handle magnetic and geographic poles.
    ** 3/28/2000 EAW
    ** Added missing comment close, the lack of which caused the altitude 
    ** correction to be omitted.
    ** 01/31/01 Jim Seymour (jseymour@LinxNet.com)
    ** 23/01/13 POrt to C# (michael.coyle@BlueToque.ca)
    **
    ** This program is free software; you can redistribute it and/or
    ** modify it under the terms of the GNU General Public Licence as
    ** published by the Free Software Foundation; either version 2 of the
    ** Licence, or (at your option) any later version.
    **
    ** This program is distributed in the hope that it will be useful, but
    ** WITHOUT ANY WARRANTY; without even the implied warranty of
    ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    ** General Public Licence for more details.
    **
    ** You should have received a copy of the GNU General Public Licence
    ** along with this program; if not, write to the Free Software
    ** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
    **
    */
    class MagVar
    {

        #region statics
        //const double a = 6378.16;	/* major radius (km) IAU66 ellipsoid */

        const double a = 6378.137; // iz WMM 2015 Calculator.xlsx sa www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml 
        //const double f = 1.0 / 298.25;	/* inverse flattening IAU66 ellipsoid */
        const double f = 1.0 / 298.2572235630; // iz WMM 2015 Calculator.xlsx sa www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml 
        //const double b = 6378.16 * (1.0 - 1.0 / 298.25);
        /* minor radius b=a*(1-f) */
        const double b = 6356.75231424518; // iz WMM 2015 Calculator.xlsx sa www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml
        const double r_0 = 6371.2;	/* "mean radius" for spherical harmonic expansion */



        /*WMM85 constants */

        static double[,] gnm_wmm85 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-29879.8, -1903.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {-2070.6, 3040.8, 1696.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {1303.9, -2203, 1241.7, 839.4, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {933.8, 781.8, 359, -424.5, 164.5, 0, 0, 0, 0, 0, 0, 0, 0},
            {-216.4, 353, 254.3, -93.7, -157.5, -45.2, 0, 0, 0, 0, 0, 0, 0}, 
            {53.2, 63.8, 51.3, -188.4, 3.3, 20.3, -101.7, 0, 0, 0, 0, 0, 0}, 
            {76.9, -60.7, 0.7, 25.4, -8.1, 6.9, 7, -4.4, 0, 0, 0, 0, 0}, 
            {18.4, 5.1, 1.2, -12, -9.1, 0.1, 4.7, 6.5, -9.5, 0, 0, 0, 0}, 
            {5.7, 10.9, 0.9, -12.2, 9.5, -3.3, -1, 6.5, 1.5, -4.8, 0, 0, 0}, 
            {-3.4, -4.7, 2.5, -5.5, -2.1, 4.6, 3.2, 0.6, 1.9, 2.8, -0.2, 0, 0}, 
            {2.3, -0.8, -2, 2.1, 0.2, -0.4, -0.4, 1.6, 1.5, -0.7, 2.3, 3.5, 0}, 
            {-1.8, 0, 0.1, -0.3, 0.5, 0.5, -0.6, -0.4, 0, -0.5, 0, 0.7, -0.2}};

        static double[,] hnm_wmm85 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 5490.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -2189.1, -312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -310.3, 282.6, -299.2, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 227.2, -246.7, 72.5, -299.1, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 43.4, 148.2, -154.8, -71.8, 91.5, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -12.3, 87.9, 67.8, -51.1, -4, 20.8, 0, 0, 0, 0, 0, 0}, 
            {0, -80.1, -25.9, -0.9, 21.6, 18.5, -20, -7.7, 0, 0, 0, 0, 0}, 
            {0, 3.8, -20.2, 5, -24.2, 12.2, 7.6, -16.3, -10.9, 0, 0, 0, 0}, 
            {0, -20.8, 15.8, 9, -5, -6.4, 9.1, 9.9, -5.8, 2.3, 0, 0, 0}, 
            {0, 1.2, 0.4, 2.5, 5.6, -4.4, -0.5, -1.6, 3.7, -0.5, -6.1, 0, 0}, 
            {0, 1.3, 2, -1.1, -2.8, 0.7, -0.1, -2.4, -0.4, -1.5, -1.5, 0.7, 0},
            {0, 0.3, 0.6, 2.5, -1.7, 0.3, 0.2, -0.1, 0.1, 0.1, -1.4, 0.4, 0.7}};

        static double[,] gtnm_wmm85 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {21.9, 10.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {-11.2, 1.8, 9.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {8.3, -2, -0.6, 2.4, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {-1.2, 0.1, -9.7, -1.7, -9.3, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {1.4, -0.5, -1.2, -2.2, 0.9, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {3.1, 0, 1.8, -0.2, -0.4, 2.4, 1.8, 0, 0, 0, 0, 0, 0}, 
            {-0.1, -0.8, -1.2, 1.1, 0, 0.6, -1.8, -1.2, 0, 0, 0, 0, 0},
            {0.2, 0, 0.7, 0.1, 0.2, -0.3, -0.1, 0.2, -2.2, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        static double[,] htnm_wmm85 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -31.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -9.7, -19.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 6.1, 1.3, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 1.3, 3.6, 2.5, 0.6, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -0.9, 0.6, 0.3, 2.4, -1.4, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0.7, -2.1, -1.4, -4.3, -0.7, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 1.2, 2, 2.6, 0.9, 0.8, 0.4, 0, 0, 0, 0, 0}, 
            {0, -0.6, -1.5, 0.1, -1.1, 0.4, -2, 0.9, 1.5, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        /* wmm90 constants */

        static double[,] gnm_wmm90 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-29780.5, -1851.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {-2134.3, 3062.2, 1691.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {1312.9, -2244.7, 1246.8, 808.6, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {933.5, 784.9, 323.5, -421.7, 139.2, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {-208.3, 352.2, 246.5, -110.8, -162.3, -37.2, 0, 0, 0, 0, 0, 0, 0}, 
            {59, 63.7, 60, -181.3, 0.4, 15.4, -96, 0, 0, 0, 0, 0, 0}, 
            {76.1, -62.1, 1.3, 30.2, 4.7, 7.9, 10.1, 1.9, 0, 0, 0, 0, 0}, 
            {22.9, 2.3, -1.2, -11.7, -17.5, 2.2, 5.7, 3, -7, 0, 0, 0, 0}, 
            {3.6, 9.5, -0.9, -10.7, 10.7, -3.2, -1.4, 6.3, 0.8, -5.5, 0, 0, 0},
            {-3.3, -2.6, 4.5, -5.6, -3.6, 3.9, 3.2, 1.7, 3, 3.7, 0.7, 0, 0}, 
            {1.3, -1.4, -2.5, 3.2, 0.2, -1.1, 0.3, -0.3, 0.9, -1.1, 2.4, 3, 0}, 
            {-1.3, 0.1, 0.5, 0.7, 0.4, -0.2, -1.1, 0.9, -0.6, 0.8, 0.2, 0.4, 0.2}};

        static double[,] hnm_wmm90 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 5407.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -2278.3, -384.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -284.9, 291.7, -352.4, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 249.4, -232.7, 91.3, -296.5, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 40.8, 148.7, -154.6, -67.6, 97.4, 0, 0, 0, 0, 0, 0, 0},
            {0, -14.7, 82.2, 70, -56.2, -1.4, 24.6, 0, 0, 0, 0, 0, 0}, 
            {0, -78.6, -26.7, 0.1, 19.9, 17.9, -21.5, -6.8, 0, 0, 0, 0, 0}, 
            {0, 9.7, -19.3, 6.6, -20.1, 13.4, 9.8, -19, -9.1, 0, 0, 0, 0}, 
            {0, -21.9, 14.3, 9.5, -6.7, -6.4, 9.1, 8.9, -8, 2.1, 0, 0, 0}, 
            {0, 2.6, 1.2, 2.6, 5.7, -4, -0.4, -1.7, 3.8, -0.8, -6.5, 0, 0}, 
            {0, 0, 1, -1.6, -2.2, 1.1, -0.7, -1.7, -1.5, -1.3, -1.1, 0.6, 0}, 
            {0, 0.7, 0.7, 1.3, -1.5, 0.3, 0.2, -1.1, 1.2, -0.2, -1.3, 0.6, 0.6}};

        static double[,] gtnm_wmm90 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {16, 9.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-11.7, 3.7, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {2.1, -7.6, 0, -5.8, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {-0.8, 1, -7.4, 0.8, -6.4, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {1.7, 0, 0, -2.7, 0, 3, 0, 0, 0, 0, 0, 0, 0}, 
            {0.8, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0.5, 0, -0.9, 1.5, 2.7, -1, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -1.1, 0, 0, -2.1, 0, 1, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        static double[,] htnm_wmm90 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -13.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -12.8, -14.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 3.1, 0.8, -11.3, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 3.3, 3.7, 2.8, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, -2.1, 1.2, 1.2, 0.6, 0, 0, 0, 0, 0, 0, 0}, 
            {0, -0.6, -0.6, 0, -2.3, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0.6, 0.8, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0}, 
            {0, 0.4, -0.8, 0.5, 0.3, 0.5, 0, -0.7, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        /* wmm95 constants */

        static double[,] gnm_wmm95 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-29682.1,-1782.2,0,0,0,0,0,0,0,0,0,0,0},
            {-2194.7,3078.6,1685.7,0,0,0,0,0,0,0,0,0,0},
            {1318.8,-2273.6,1246.9,766.3,0,0,0,0,0,0,0,0,0},
            {940,782.9,290.9,-418.9,113.8,0,0,0,0,0,0,0,0},
            {-209.5,354,238.2,-122.1,-162.8,-23.3,0,0,0,0,0,0,0},
            {68.5,65.6,64.1,-169.1,-0.5,16.5,-91,0,0,0,0,0,0},
            {78,-68.1,0.1,29.6,6,8.7,9.2,-2.4,0,0,0,0,0},
            {24.7,3.4,-1.5,-9.6,-16.5,2.6,3.6,-4.9,-8.5,0,0,0,0},
            {2.9,7.5,0.4,-10.3,9.7,-2.3,-2.4,6.8,-0.5,-6.5,0,0,0},
            {-2.9,-3.3,2.8,-4.3,-3.1,2.4,2.8,0.7,4.1,3.6,0.6,0,0},
            {1.7,-1.6,-3.6,1.2,-0.6,0.1,-0.7,-0.8,1.3,-0.3,2.2,4.2,0},
            {-1.8,0.9,-0.1,-0.5,0.8,0.2,0.5,0.4,-0.4,0.3,0.2,0.4,0.6}};

        static double[,] hnm_wmm95 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0,5315.6,0,0,0,0,0,0,0,0,0,0,0},
            {0,-2359.1,-418.6,0,0,0,0,0,0,0,0,0,0},
            {0,-261.1,301,-416.5,0,0,0,0,0,0,0,0,0},
            {0,259.4,-230.9,99.8,-306.1,0,0,0,0,0,0,0,0},
            {0,43.7,157.6,-150.1,-59.2,104.4,0,0,0,0,0,0,0},
            {0,-15.2,74.3,69.4,-55.3,3,33.3,0,0,0,0,0,0},
            {0,-76.1,-24.5,1.6,20,16.5,-23.6,-6.8,0,0,0,0,0},
            {0,14.9,-19.5,6.3,-20.4,12.2,7,-19,-8.8,0,0,0,0},
            {0,-19.8,14.6,10.9,-7.5,-6.8,9.3,7.7,-8.1,2.6,0,0,0},
            {0,3.2,1.7,2.9,5.6,-3.4,-0.7,-2.9,2.3,-1.6,-6.6,0,0},
            {0,0.3,1,-3.6,-1.4,1.9,0.2,-1.3,-2.4,-0.6,-2.2,1.3,0},
            {0,0.3,1.4,0.8,-3,0.7,0.5,-0.8,0.6,0.1,-1.3,-0.4,0.9}};

        static double[,] gtnm_wmm95 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {17.6,13.2,0,0,0,0,0,0,0,0,0,0,0},
            {-13.7,4,-0.3,0,0,0,0,0,0,0,0,0,0},
            {0.8,-6.6,-0.5,-8.5,0,0,0,0,0,0,0,0,0},
            {1.2,1.1,-6.8,0.3,-4.5,0,0,0,0,0,0,0,0},
            {0.9,0.5,-1.4,-1.7,0,2.1,0,0,0,0,0,0,0},
            {0.4,-0.3,0.3,2.1,0,-0.4,-0.4,0,0,0,0,0,0},
            {-0.3,-1.1,-0.5,0.5,1.3,0.1,0,-0.9,0,0,0,0,0},
            {0.1,0,0.4,0.3,-1.3,0.5,0.4,-0.9,0.1,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0}};

        static double[,] htnm_wmm95 = new double[13, 13]
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0,-18,0,0,0,0,0,0,0,0,0,0,0},
            {0,-14.6,-7.2,0,0,0,0,0,0,0,0,0,0},
            {0,4,2.2,-12.6,0,0,0,0,0,0,0,0,0},
            {0,1.3,1,2.5,-1.2,0,0,0,0,0,0,0,0},
            {0,0.5,1.5,0.6,1.7,0.6,0,0,0,0,0,0,0},
            {0,0.7,-1.5,-0.5,-0.7,1.1,2.6,0,0,0,0,0,0},
            {0,0.3,0,0.7,-0.6,0.1,-0.6,-0.4,0,0,0,0,0},
            {0,0.4,-0.3,0.1,0.8,-0.1,-1.3,-0.9,-1.1,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0}};

        /* wmm2000 constants */

        static double[,] gnm_wmm2000 = new double[13, 13]
        {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-29616.0, -1722.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-2266.7, 3070.2, 1677.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {1322.4, -2291.5, 1255.9, 724.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {932.1, 786.3, 250.6, -401.5, 106.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-211.9, 351.6, 220.8, -134.5, -168.8, -13.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {73.8, 68.2, 74.1, -163.5, -3.8, 17.1, -85.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {77.4, -73.9, 2.2, 35.7, 7.3, 5.2, 8.4, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0},
            {23.3, 7.3, -8.5, -6.6, -16.9, 8.6, 4.9, -7.8, -7.6, 0.0, 0.0, 0.0, 0.0},
            {5.7, 8.5, 2.0, -9.8, 7.6, -7.0, -2.0, 9.2, -2.2, -6.6, 0.0, 0.0, 0.0},
            {-2.2, -5.7, 1.6, -3.7, -0.6, 4.1, 2.2, 2.2, 4.6, 2.3, 0.1, 0.0, 0.0},
            {3.3, -1.1, -2.4, 2.6, -1.3, -1.7, -0.6, 0.4, 0.7, -0.3, 2.3, 4.2, 0.0},
            {-1.5, -0.2, -0.3, 0.5, 0.2, 0.9, -1.4, 0.6, -0.6, -1.0, -0.3, 0.3, 0.4},
        };

        static double[,] hnm_wmm2000 = new double[13, 13]
        {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 5194.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -2484.8, -467.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -224.7, 293.0, -486.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 273.3, -227.9, 120.9, -302.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 42.0, 173.8, -135.0, -38.6, 105.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -17.4, 61.2, 63.2, -62.9, 0.2, 43.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -62.3, -24.5, 8.9, 23.4, 15.0, -27.6, -7.8, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 12.4, -20.8, 8.4, -21.2, 15.5, 9.1, -15.5, -5.4, 0.0, 0.0, 0.0, 0.0},
            {0.0, -20.4, 13.9, 12.0, -6.2, -8.6, 9.4, 5.0, -8.4, 3.2, 0.0, 0.0, 0.0},
            {0.0, 0.9, -0.7, 3.9, 4.8, -5.3, -1.0, -2.4, 1.3, -2.3, -6.4, 0.0, 0.0},
            {0.0, -1.5, 0.7, -1.1, -2.3, 1.3, -0.6, -2.8, -1.6, -0.1, -1.9, 1.4, 0.0},
            {0.0, -1.0, 0.7, 2.2, -2.5, -0.2, 0.0, -0.2, 0.0, 0.2, -0.9, -0.2, 1.0},
        };

        static double[,] gtnm_wmm2000 = new double[13, 13]
        {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {14.7, 11.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-13.6, -0.7, -1.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.3, -4.3, 0.9, -8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-1.6, 0.9, -7.6, 2.2, -3.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.9, -0.2, -2.5, -2.7, -0.9, 1.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {1.2, 0.2, 1.7, 1.6, -0.1, -0.3, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.4, -0.8, -0.2, 1.1, 0.4, 0.0, -0.2, -0.2, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.3, 0.6, -0.8, 0.3, -0.2, 0.5, 0.0, -0.6, 0.1, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        static double[,] htnm_wmm2000 = new double[13, 13]
        {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -20.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -21.5, -9.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 6.4, -1.3, -13.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 2.3, 0.7, 3.7, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 2.1, 2.3, 3.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -0.3, -1.7, -0.9, -1.0, -0.1, 1.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 1.4, 0.2, 0.7, 0.4, -0.3, -0.8, -0.1, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -0.5, 0.1, -0.2, 0.0, 0.1, -0.1, 0.3, 0.2, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        /* wmm2005 constants */

        static double[,] gnm_wmm2005 = new double[13, 13]
        {
            {     0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {-29556.8,  -1671.7,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            { -2340.6,   3046.9,   1657.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {  1335.4,  -2305.1,   1246.7,    674.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {   919.8,    798.1,    211.3,   -379.4,    100.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {  -227.4,    354.6,    208.7,   -136.5,   -168.3,    -14.1,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {    73.2,     69.7,     76.7,   -151.2,    -14.9,     14.6,    -86.3,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {    80.1,    -74.5,     -1.4,     38.5,     12.4,      9.5,      5.7,      1.8,      0.0,      0.0,      0.0,      0.0,      0.0},
            {    24.9,      7.7,    -11.6,     -6.9,    -18.2,     10.0,      9.2,    -11.6,     -5.2,      0.0,      0.0,      0.0,      0.0},
            {     5.6,      9.9,      3.5,     -7.0,      5.1,    -10.8,     -1.3,      8.8,     -6.7,     -9.1,      0.0,      0.0,      0.0},
            {    -2.3,     -6.3,      1.6,     -2.6,      0.0,      3.1,      0.4,      2.1,      3.9,     -0.1,     -2.3,      0.0,      0.0},
            {     2.8,     -1.6,     -1.7,      1.7,     -0.1,      0.1,     -0.7,      0.7,      1.8,      0.0,      1.1,      4.1,      0.0},
            {    -2.4,     -0.4,      0.2,      0.8,     -0.3,      1.1,     -0.5,      0.4,     -0.3,     -0.3,     -0.1,     -0.3,     -0.1}
        };

        static double[,] hnm_wmm2005 = new double[13, 13]
        {
            {   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0, 5079.8,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,-2594.7, -516.7,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0, -199.9,  269.3, -524.2,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  281.5, -226.0,  145.8, -304.7,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,   42.4,  179.8, -123.0,  -19.5,  103.6,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  -20.3,   54.7,   63.6,  -63.4,   -0.1,   50.4,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  -61.5,  -22.4,    7.2,   25.4,   11.0,  -26.4,   -5.1,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,   11.2,  -21.0,    9.6,  -19.8,   16.1,    7.7,  -12.9,   -0.2,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  -20.1,   12.9,   12.6,   -6.7,   -8.1,    8.0,    2.9,   -7.9,    6.0,    0.0,    0.0,    0.0},
            {   0.0,    2.4,    0.2,    4.4,    4.8,   -6.5,   -1.1,   -3.4,   -0.8,   -2.3,   -7.9,    0.0,    0.0},
            {   0.0,    0.3,    1.2,   -0.8,   -2.5,    0.9,   -0.6,   -2.7,   -0.9,   -1.3,   -2.0,   -1.2,    0.0},
            {   0.0,   -0.4,    0.3,    2.4,   -2.6,    0.6,    0.3,    0.0,    0.0,    0.3,   -0.9,   -0.4,    0.8}
        };

        static double[,] gtnm_wmm2005 = new double[13, 13]
        {
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 8.0, 10.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-15.1, -7.8, -0.8,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.4, -2.6, -1.2, -6.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-2.5,  2.8, -7.0,  6.2, -3.8,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-2.8,  0.7, -3.2, -1.1,  0.1, -0.8,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-0.7,  0.4, -0.3,  2.3, -2.1, -0.6,  1.4,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.2, -0.1, -0.3,  1.1,  0.6,  0.5, -0.4,  0.6,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.1,  0.3, -0.4,  0.3, -0.3,  0.2,  0.4, -0.7,  0.4,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}
        };

        static double[,] htnm_wmm2005 = new double[13, 13]
        {
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -20.9,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -23.2, -14.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  5.0, -7.0, -0.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  2.2,  1.6,  5.8,  0.1,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  1.7,  2.1,  4.8, -1.1,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -0.6, -1.9, -0.4, -0.5, -0.3,  0.7,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.6,  0.4,  0.2,  0.3, -0.8, -0.2,  0.1,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -0.2,  0.1,  0.3,  0.4,  0.1, -0.2,  0.4,  0.4,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}
        };

        /* wmm2010 constants */

        static double[,] gnm_wmm2010 = new double[13, 13] {
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {-29496.6,-1586.3,0,0,0,0,0,0,0,0,0,0,0},
            {-2396.6,3026.1,1668.6,0,0,0,0,0,0,0,0,0,0},
            {1340.1,-2326.2,1231.9,634,0,0,0,0,0,0,0,0,0},
            {912.6,808.9,166.7,-357.1,89.4,0,0,0,0,0,0,0,0},
            {-230.9,357.2,200.3,-141.1,-163,-7.8,0,0,0,0,0,0,0},
            {72.8,68.6,76,-141.4,-22.8,13.2,-77.9,0,0,0,0,0,0},
            {80.5,-75.1,-4.7,45.3,13.9,10.4,1.7,4.9,0,0,0,0,0},
            {24.4,8.1,-14.5,-5.6,-19.3,11.5,10.9,-14.1,-3.7,0,0,0,0},
            {5.4,9.4,3.4,-5.2,3.1,-12.4,-0.7,8.4,-8.5,-10.1,0,0,0},
            {-2,-6.3,0.9,-1.1,-0.2,2.5,-0.3,2.2,3.1,-1,-2.8,0,0},
            {3,-1.5,-2.1,1.7,-0.5,0.5,-0.8,0.4,1.8,0.1,0.7,3.8,0},
            {-2.2,-0.2,0.3,1,-0.6,0.9,-0.1,0.5,-0.4,-0.4,0.2,-0.8,0}
        };

        static double[,] hnm_wmm2010 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,4944.4,0,0,0,0,0,0,0,0,0,0,0},
            {0,-2707.7,-576.1,0,0,0,0,0,0,0,0,0,0},
            {0,-160.2,251.9,-536.6,0,0,0,0,0,0,0,0,0},
            {0,286.4,-211.2,164.3,-309.1,0,0,0,0,0,0,0,0},
            {0,44.6,188.9,-118.2,0,100.9,0,0,0,0,0,0,0},
            {0,-20.8,44.1,61.5,-66.3,3.1,55,0,0,0,0,0,0},
            {0,-57.9,-21.1,6.5,24.9,7,-27.7,-3.3,0,0,0,0,0},
            {0,11,-20,11.9,-17.4,16.7,7,-10.8,1.7,0,0,0,0},
            {0,-20.5,11.5,12.8,-7.2,-7.4,8,2.1,-6.1,7,0,0,0},
            {0,2.8,-0.1,4.7,4.4,-7.2,-1,-3.9,-2,-2,-8.3,0,0},
            {0,0.2,1.7,-0.6,-1.8,0.9,-0.4,-2.5,-1.3,-2.1,-1.9,-1.8,0},
            {0,-0.9,0.3,2.1,-2.5,0.5,0.6,0,0.1,0.3,-0.9,-0.2,0.9}
        };

        static double[,] gtnm_wmm2010 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {11.6,16.5,0,0,0,0,0,0,0,0,0,0,0},
            {-12.1,-4.4,1.9,0,0,0,0,0,0,0,0,0,0},
            {0.4,-4.1,-2.9,-7.7,0,0,0,0,0,0,0,0,0},
            {-1.8,2.3,-8.7,4.6,-2.1,0,0,0,0,0,0,0,0},
            {-1,0.6,-1.8,-1,0.9,1,0,0,0,0,0,0,0},
            {-0.2,-0.2,-0.1,2,-1.7,-0.3,1.7,0,0,0,0,0,0},
            {0.1,-0.1,-0.6,1.3,0.4,0.3,-0.7,0.6,0,0,0,0,0},
            {-0.1,0.1,-0.6,0.2,-0.2,0.3,0.3,-0.6,0.2,0,0,0,0},
            {0,-0.1,0,0.3,-0.4,-0.3,0.1,-0.1,-0.4,-0.2,0,0,0},
            {0,0,-0.1,0.2,0,-0.1,-0.2,0,-0.1,-0.2,-0.2,0,0},
            {0,0,0,0.1,0,0,0,0,0,0,-0.1,0,0},
            {0,0,0.1,0.1,-0.1,0,0,0,0,0,0,-0.1,0.1}
        };

        static double[,] htnm_wmm2010 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,-25.9,0,0,0,0,0,0,0,0,0,0,0},
            {0,-22.5,-11.8,0,0,0,0,0,0,0,0,0,0},
            {0,7.3,-3.9,-2.6,0,0,0,0,0,0,0,0,0},
            {0,1.1,2.7,3.9,-0.8,0,0,0,0,0,0,0,0},
            {0,0.4,1.8,1.2,4,-0.6,0,0,0,0,0,0,0},
            {0,-0.2,-2.1,-0.4,-0.6,0.5,0.9,0,0,0,0,0,0},
            {0,0.7,0.3,-0.1,-0.1,-0.8,-0.3,0.3,0,0,0,0,0},
            {0,-0.1,0.2,0.4,0.4,0.1,-0.1,0.4,0.3,0,0,0,0},
            {0,0,-0.2,0,-0.1,0.1,0,-0.2,0.3,0.2,0,0,0},
            {0,0.1,-0.1,0,-0.1,-0.1,0,-0.1,-0.2,0,-0.1,0,0},
            {0,0,0.1,0,0.1,0,0.1,0,-0.1,-0.1,0,-0.1,0},
            {0,0,0,0,0,0,0.1,0,0,0,0,0,0}
        };

        //************************************************************************
        // WMM Gausovi koeficijenti za 2015 su dodati rucno iz WMM 2015 Calculator.xlsx sa www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml 
        // vaze od 01.01.2015 do 31.12.2019.

        static double[,] gnm_wmm2015 = new double[13, 13] {
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {-29438.5, -1501.1, 0,0,0,0,0,0,0,0,0,0,0},
            {-2445.3, 3012.5, 1676.6, 0,0,0,0,0,0,0,0,0,0},
            {1351.1, -2352.3, 1225.6, 581.9, 0,0,0,0,0,0,0,0,0},
            {907.2, 813.7, 120.3, -335, 70.3, 0,0,0,0,0,0,0,0},
            {-232.6, 360.1, 192.4, -141, -157.4, 4.3, 0,0,0,0,0,0,0},
            {69.5, 67.4, 72.8, -129.8, -29, 13.2, -70.9, 0,0,0,0,0,0},
            {81.6, -76.1, -6.8, 51.9, 15, 9.3, -2.8, 6.7, 0,0,0,0,0},
            {24, 8.6, -16.9, -3.2, -20.6, 13.3, 11.7, -16, -2, 0,0,0,0},
            {5.4, 8.8, 3.1, -3.1, 0.6, -13.3, -0.1, 8.7, -9.1, -10.5, 0,0,0},
            {-1.9, -6.5, 0.2, 0.6, -0.6, 1.7, -0.7, 2.1, 2.3, -1.8, -3.6, 0,0},
            {3.1, -1.5, -2.3, 2.1, -0.9, 0.6, -0.7, 0.2, 1.7, -0.2, 0.4, 3.5, 0},
            {-2, -0.3, 0.4, 1.3, -0.9, 0.9, 0.1, 0.5, -0.4, -0.4, 0.2, -0.9, 0}
        };

        static double[,] hnm_wmm2015 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0, 4796.2, 0,0,0,0,0,0,0,0,0,0,0},
            {0, -2845.6, -642, 0,0,0,0,0,0,0,0,0,0},
            {0, -115.3, 245, -538.3, 0,0,0,0,0,0,0,0,0},
            {0, 283.4, -188.6, 180.9, -329.5, 0,0,0,0,0,0,0,0},
            {0, 47.4, 196.9, -119.4, 16.1, 100.1, 0,0,0,0,0,0,0},
            {0, -20.7, 33.2, 58.8, -66.5, 7.3, 62.5, 0,0,0,0,0,0},
            {0, -54.1, -19.4, 5.6, 24.4, 3.3, -27.5, -2.3, 0,0,0,0,0},
            {0, 10.2, -18.1, 13.2, -14.6, 16.2, 5.7, -9.1, 2.2, 0,0,0,0},
            {0, -21.6, 10.8, 11.7, -6.8, -6.9, 7.8, 1, -3.9, 8.5, 0,0,0},
            {0, 3.3, -0.3, 4.6, 4.4, -7.9, -0.6, -4.1, -2.8, -1.1, -8.7, 0,0},
            {0, -0.1, 2.1, -0.7, -1.1, 0.7, -0.2, -2.1, -1.5, -2.5, -2, -2.3, 0},
            {0, -1, 0.5, 1.8, -2.2, 0.3, 0.7, -0.1, 0.3, 0.2, -0.9, -0.2, 0.7}
        };

        static double[,] gtnm_wmm2015 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {10.7, 17.9, 0,0,0,0,0,0,0,0,0,0,0},
            {-8.6, -3.3, 2.4, 0,0,0,0,0,0,0,0,0,0},
            {3.1, -6.2, -0.4, -10.4, 0,0,0,0,0,0,0,0,0},
            {-0.4, 0.8, -9.2, 4, -4.2, 0,0,0,0,0,0,0,0},
            {-0.2, 0.1, -1.4, 0, 1.3, 3.8, 0,0,0,0,0,0,0},
            {-0.5, -0.2, -0.6, 2.4, -1.1, 0.3, 1.5, 0,0,0,0,0,0},
            {0.2, -0.2, -0.4, 1.3, 0.2, -0.4, -0.9, 0.3, 0,0,0,0,0},
            {0, 0.1, -0.5, 0.5, -0.2, 0.4, 0.2, -0.4, 0.3, 0,0,0,0},
            {0, -0.1, -0.1, 0.4, -0.5, -0.2, 0.1, 0, -0.2, -0.1, 0,0,0},
            {0, 0, -0.1, 0.3, -0.1, -0.1, -0.1, 0, -0.2, -0.1, -0.2, 0,0},
            {0, 0, -0.1, 0.1, 0,0,0,0,0,0, -0.1, -0.1, 0},
            {0.1, 0, 0, 0.1, -0.1, 0, 0.1, 0,0,0,0,0,0}
        };

        static double[,] htnm_wmm2015 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0, -26.8, 0,0,0,0,0,0,0,0,0,0,0},
            {0, -27.1, -13.3, 0,0,0,0,0,0,0,0,0,0},
            {0, 8.4, -0.4, 2.3, 0,0,0,0,0,0,0,0,0},
            {0, -0.6, 5.3, 3, -5.3, 0,0,0,0,0,0,0,0},
            {0, 0.4, 1.6, -1.1, 3.3, 0.1, 0,0,0,0,0,0,0},
            {0, 0, -2.2, -0.7, 0.1, 1, 1.3, 0,0,0,0,0,0},
            {0, 0.7, 0.5, -0.2, -0.1, -0.7, 0.1, 0.1, 0,0,0,0,0},
            {0, -0.3, 0.3, 0.3, 0.6, -0.1, -0.2, 0.3, 0, 0,0,0,0},
            {0, 0, -0.2, -0.1, -0.2, 0.1, 0, -0.2, 0.4, 0.3, 0,0,0},
            {0, 0.1, -0.1, 0, 0, -0.2, 0.1, -0.1, -0.2, 0.1, -0.1, 0,0},
            {0, 0, 0.1, 0, 0.1, 0, 0, 0.1, 0, -0.1, 0, -0.1, 0},
            {0, 0, 0, -0.1, 0,0,0,0,0,0,0,0,0}
        };


        #endregion

        const int nmax = 12;

        double[,] P = new double[13, 13];
        double[,] DP = new double[13, 13];
        double[,] gnm = new double[13, 13];
        double[,] hnm = new double[13, 13];
        double[] sm = new double[13];
        double[] cm = new double[13];

        static double[] root = new double[13];
        static double[, ,] roots = new double[13, 13, 2];

        /* Convert date to Julian day    1950-2049 */
        public long yymmdd_to_julian_days(int yy, int mm, int dd)
        {
            long jd;

            yy = (yy < 50) ? (2000 + yy) : (1900 + yy);
            jd = dd - 32075L + 1461L * (yy + 4800L + (mm - 14) / 12) / 4;
            jd = jd + 367L * (mm - 2 - (mm - 14) / 12 * 12) / 12;
            jd = jd - 3 * ((yy + 4900L + (mm - 14) / 12) / 100) / 4;

            return (jd);
        }

        /* Convert degrees to radians */
        public double deg_to_rad(double deg) // dodah da bude public da bih preracunao lat,long iz deg u rad
        {
            return deg * Math.PI / 180.0;
        }

        /* Convert radians to degrees */
        public double rad_to_deg(double rad)
        {
            return rad * 180.0 / Math.PI;
        }

        public double cos(double d) { return Math.Cos(d); }
        public double sin(double d) { return Math.Sin(d); }
        public double sqrt(double d) { return Math.Sqrt(d); }
        public double max(double d, double e) { return Math.Max(d, e); }
        public int max(int d, int e) { return Math.Max(d, e); }
        public double min(double d, double e) { return Math.Min(d, e); }
        public double atan2(double d, double e) { return Math.Atan2(d, e); }
        public double pi { get { return Math.PI; } }
        static bool been_here = false;

        /* 
         * return variation (in radians) given: 
         * geodetic latitude (radians), longitude (radians), height (km), (Julian) date,
         * model (1985 za WMM85, 1990 za WMM90, 1995 za WMM95, 2000 za WMM2000, 2005 za WMM2005, 2010 za WMM2010, 2015 za WWM2015
         * N and E lat and long are positive, S and W negative
         */
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lat">latitude in radians</param>
        /// <param name="lon">longitude in radians</param>
        /// <param name="h">altitude in km</param>
        /// <param name="dat">julian date</param>
        /// <param name="model">model to use:1 is IGRF90, 2 is WMM85, 3 is WMM90, 4 is WMM95 </param>
        /// <param name="field"></param>
        /// <returns>Magnetic variation in radians</returns>
        public unsafe double SGMagVar(double lat, double lon, double h, long dat, int model, double[] field)
        {
            /* output field B_r,B_th,B_phi,B_x,B_y,B_z */
            int n, m, nmaxl;
            double yearfrac, sr, r, theta, c, s, psi, fn, fn_0, B_r, B_theta, B_phi, X, Y, Z;
            double sinpsi, cospsi, inv_s;

            //static int been_here = 0;

            double sinlat = sin(lat);
            double coslat = cos(lat);

            /* convert to geocentric */
            sr = sqrt(a * a * coslat * coslat + b * b * sinlat * sinlat);
            /* sr is effective radius */
            theta = atan2(coslat * (h * sr + a * a), sinlat * (h * sr + b * b));

            /* theta is geocentric co-latitude */

            r = h * h + 2.0 * h * sr +
            (a * a * a * a - (a * a * a * a - b * b * b * b) * sinlat * sinlat) /
            (a * a - (a * a - b * b) * sinlat * sinlat);

            r = sqrt(r);

            /* r is geocentric radial distance */
            c = cos(theta);
            s = sin(theta);
            /* protect against zero divide at geographic poles */
            //inv_s =  1.0 / (s +(s == 0.0)*1.0e-8); 
            if (s == 0)
                inv_s = 1.0 / (s + 1 * 1.0e-8);
            else
                inv_s = 1.0 / (s + 0 * 1.0e-8);

            /*zero out arrays */
            for (n = 0; n <= nmax; n++)
            {
                for (m = 0; m <= n; m++)
                {
                    P[n, m] = 0;
                    DP[n, m] = 0;
                }
            }

            /* diagonal elements */
            P[0, 0] = 1;
            P[1, 1] = s;
            DP[0, 0] = 0;
            DP[1, 1] = c;
            P[1, 0] = c;
            DP[1, 0] = -s;

            /* these values will not change for subsequent function calls */
            if (!been_here)
            {
                for (n = 2; n <= nmax; n++)
                {
                    root[n] = sqrt((2.0 * n - 1) / (2.0 * n));
                }

                for (m = 0; m <= nmax; m++)
                {
                    double mm = m * m;
                    for (n = max(m + 1, 2); n <= nmax; n++)
                    {
                        roots[m, n, 0] = sqrt((n - 1) * (n - 1) - mm);
                        roots[m, n, 1] = 1.0 / sqrt(n * n - mm);
                    }
                }
                been_here = true;
            }

            for (n = 2; n <= nmax; n++)
            {
                /*  double root = sqrt((2.0*n-1) / (2.0*n)); */
                P[n, n] = P[n - 1, n - 1] * s * root[n];
                DP[n, n] = (DP[n - 1, n - 1] * s + P[n - 1, n - 1] * c) * root[n];
            }

            /* lower triangle */
            for (m = 0; m <= nmax; m++)
            {
                /*  double mm = m*m;  */
                for (n = max(m + 1, 2); n <= nmax; n++)
                {
                    /* double root1 = sqrt((n-1)*(n-1) - mm); */
                    /* double root2 = 1.0 / sqrt( n*n - mm);  */
                    P[n, m] = (P[n - 1, m] * c * (2.0 * n - 1) -
                           P[n - 2, m] * roots[m, n, 0]) * roots[m, n, 1];
                    DP[n, m] = ((DP[n - 1, m] * c - P[n - 1, m] * s) *
                            (2.0 * n - 1) - DP[n - 2, m] * roots[m, n, 0]) * roots[m, n, 1];
                }
            }

            /* compute gnm, hnm at dat */
            nmaxl = 12;  /* indeksiranje */
            switch (model)
            {
                case 1985:	/* WMM85 */
                    yearfrac = (dat - yymmdd_to_julian_days(85, 1, 1)) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = gnm_wmm85[n, m] + yearfrac * gtnm_wmm85[n, m];
                            hnm[n, m] = hnm_wmm85[n, m] + yearfrac * htnm_wmm85[n, m];
                        }
                    break;

                case 1990:	/* WMM90 */
                    yearfrac = (dat - yymmdd_to_julian_days(90, 1, 1)) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = gnm_wmm90[n, m] + yearfrac * gtnm_wmm90[n, m];
                            hnm[n, m] = hnm_wmm90[n, m] + yearfrac * htnm_wmm90[n, m];
                        }
                    break;

                case 1995:	/* WMM95 */
                    yearfrac = (dat - yymmdd_to_julian_days(95, 1, 1)) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = gnm_wmm95[n, m] + yearfrac * gtnm_wmm95[n, m];
                            hnm[n, m] = hnm_wmm95[n, m] + yearfrac * htnm_wmm95[n, m];
                        }
                    break;

                case 2000:      /* WMM2000 */
                    yearfrac = (dat - yymmdd_to_julian_days(0, 1, 1)) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = gnm_wmm2000[n, m] + yearfrac * gtnm_wmm2000[n, m];
                            hnm[n, m] = hnm_wmm2000[n, m] + yearfrac * htnm_wmm2000[n, m];
                        }
                    break;

                case 2005:      /* WMM2005 */
                    yearfrac = (dat - yymmdd_to_julian_days(5, 1, 1)) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = gnm_wmm2005[n, m] + yearfrac * gtnm_wmm2005[n, m];
                            hnm[n, m] = hnm_wmm2005[n, m] + yearfrac * htnm_wmm2005[n, m];
                        }
                    break;

                case 2010:      /* WMM2010 */
                    yearfrac = (dat - yymmdd_to_julian_days(10, 1, 1)) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = gnm_wmm2010[n, m] + yearfrac * gtnm_wmm2010[n, m];
                            hnm[n, m] = hnm_wmm2010[n, m] + yearfrac * htnm_wmm2010[n, m];
                        }
                    break;

                case 2015:
                    /* WMM2015 */
                    yearfrac = (dat - yymmdd_to_julian_days(15, 1, 1)) / 365.25; //15 jer je 2015
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = gnm_wmm2015[n, m] + yearfrac * gtnm_wmm2015[n, m];
                            hnm[n, m] = hnm_wmm2015[n, m] + yearfrac * htnm_wmm2015[n, m];
                        }
                    break;

            }

            /* compute sm (sin(m lon) and cm (cos(m lon)) */
            for (m = 0; m <= nmaxl; m++)
            {
                sm[m] = sin(m * lon);
                cm[m] = cos(m * lon);
            }

            /* compute B fields */
            B_r = 0.0;
            B_theta = 0.0;
            B_phi = 0.0;
            fn_0 = r_0 / r;
            fn = fn_0 * fn_0;

            for (n = 1; n <= nmaxl; n++)
            {
                double c1_n = 0;
                double c2_n = 0;
                double c3_n = 0;
                for (m = 0; m <= n; m++)
                {
                    double tmp = (gnm[n, m] * cm[m] + hnm[n, m] * sm[m]);
                    c1_n += tmp * P[n, m];
                    c2_n += tmp * DP[n, m];
                    c3_n += m * (gnm[n, m] * sm[m] - hnm[n, m] * cm[m]) * P[n, m];
                }
                /* fn=pow(r_0/r,n+2.0);   */
                fn *= fn_0;
                B_r += (n + 1) * c1_n * fn;
                B_theta -= c2_n * fn;
                B_phi += c3_n * fn * inv_s;
            }



            /* Find geodetic field components: */
            psi = theta - (pi / 2.0 - lat);
            sinpsi = sin(psi);
            cospsi = cos(psi);
            X = -B_theta * cospsi - B_r * sinpsi;
            Y = B_phi;
            Z = B_theta * sinpsi - B_r * cospsi;

            field[0] = B_r;
            field[1] = B_theta;
            field[2] = B_phi;
            field[3] = X;
            field[4] = Y;
            field[5] = Z;   /* output fields */
            /* find variation in radians */
            /* return zero variation at magnetic pole X=Y=0. */
            /* E is positive */
            return (X != 0.0 || Y != 0.0) ? atan2(Y, X) : (double)0.0;
        }
    }
}